{"version":3,"sources":["NewTx.js","TxStatus.js","App.js","serviceWorker.js","index.js"],"names":["NewTx","handleInput","event","_this","setState","input","parseFloat","target","value","handleOutputChange","index","val","outputs","Object","toConsumableArray","state","output","objectSpread","addr","handleSplitChange","split","handleNewOutput","push","i","length","handleSliderChange","time","depositAddr","_this2","this","classes","props","react_default","a","createElement","Card_default","className","card","index_es","Typography_default","gutterBottom","variant","component","container","noValidate","autoComplete","header","label","type","textField","onChange","margin","helperText","InputProps","endAdornment","InputAdornment_default","position","map","key","outputAddr","outputSplit","color","aria-label","size","fab","onClick","Add_default","Slider_default","slider","Button_default","button","axios","post","then","onTx","catch","error","console","log","Icon_default","rightIcon","React","Component","withStyles","theme","maxWidth","marginTop","marginLeft","spacing","unit","marginRight","marginBottom","width","padding","TxStatus","currentStep","pollStatus","id","txId","handleStatus","setTimeout","data","current","activeStep","orientation","Array","outputCount","fill","root","flexGrow","App","depositAddress","spec","txstatus","src_NewTx","src_TxStatus","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a02809a.chunk.js","sourcesContent":["import { CardContent, Fab, TextField } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport Icon from '@material-ui/core/Icon'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport Typography from '@material-ui/core/Typography'\nimport AddIcon from '@material-ui/icons/Add'\nimport Slider from '@material-ui/lab/Slider'\nimport axios from 'axios'\nimport React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\n\nclass NewTx extends React.Component {\n  handleInput = event => {\n    this.setState({ input: parseFloat(event.target.value) })\n  }\n\n  handleOutputChange = index => event => {\n    let val = event.target.value\n\n    let outputs = [...this.state.outputs]\n    let output = { ...outputs[index] }\n    output.addr = val\n    outputs[index] = output\n\n    this.setState({ outputs })\n  }\n\n  handleSplitChange = index => event => {\n    let val = parseFloat(event.target.value)\n\n    let outputs = [...this.state.outputs]\n    let output = { ...outputs[index] }\n    output.split = val\n    outputs[index] = output\n\n    this.setState({ outputs })\n  }\n\n  handleNewOutput = () => {\n    let outputs = [...this.state.outputs]\n    outputs.push({\n      addr: '',\n      split: 100\n    })\n\n    for (var i = 0; i < outputs.length; i++) {\n      outputs[i].split = 100 / outputs.length\n    }\n\n    this.setState({ outputs })\n  }\n\n  handleSliderChange = (event, value) => {\n    this.setState({ time: value })\n  }\n\n  state = {\n    input: 0,\n    time: 0,\n    outputs: [{\n      addr: '',\n      split: 100\n    }],\n    depositAddr: '',\n  }\n\n  render() {\n    const { classes } = this.props\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography gutterBottom variant=\"h4\" component=\"h2\">\n            New Transaction\n            </Typography>\n          <form className={classes.container} noValidate autoComplete=\"off\">\n            <Typography className={classes.header} variant=\"h6\" component=\"h6\">\n              Inputs\n              </Typography>\n            <TextField\n              label=\"Amount\"\n              type=\"number\"\n              className={classes.textField}\n              onChange={this.handleInput}\n              margin=\"normal\"\n              helperText=\"Number of JobCoins you're trying to anonymize.\"\n              InputProps={{\n                endAdornment: <InputAdornment position=\"end\">JC</InputAdornment>,\n              }}\n            />\n            <Typography className={classes.header} variant=\"h6\" component=\"h6\">\n              Outputs\n            </Typography>\n\n            {this.state.outputs.map((value, index) => {\n              return <div key={index}>\n                <TextField\n                  className={classes.outputAddr}\n                  key={'addr' + index}\n                  value={value.addr}\n                  onChange={\n                    this.handleOutputChange(index)\n                  }\n                  label=\"Output Address\"\n                />\n                <TextField\n                  className={classes.outputSplit}\n                  key={'split' + index}\n                  value={value.split}\n                  type=\"number\"\n                  onChange={\n                    this.handleSplitChange(index)\n                  }\n                  InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                  }}\n                  label=\"Split\"\n                />\n              </div>\n            })}\n\n            <Fab\n              color=\"primary\"\n              aria-label=\"Add\"\n              size=\"small\"\n              className={classes.fab}\n              onClick={this.handleNewOutput}>\n              <AddIcon />\n            </Fab>\n\n            <Typography className={classes.header} variant=\"h6\" component=\"h6\">\n              Time\n              </Typography>\n            <Slider\n              classes={{ container: classes.slider }}\n              value={this.state.time}\n              onChange={this.handleSliderChange}>\n            </Slider>\n            <p>{this.state.time}s</p>\n            <Button variant=\"contained\" color=\"primary\" className={classes.button}\n              onClick={() => {\n                axios.post('/new-tx', this.state)\n                  .then(this.props.onTx)\n                  .catch(function (error) {\n                    console.log(error)\n                  })\n              }}>\n              Send\n                <Icon className={classes.rightIcon}>send</Icon>\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\nconst styles = theme => ({\n  card: {\n    maxWidth: '65%',\n    margin: '0 auto',\n    marginTop: 50,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    marginTop: 0,\n    marginBottom: 10,\n    width: '80%',\n  },\n  outputAddr: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    marginTop: 0,\n    marginBottom: 10,\n    width: '80%',\n  },\n  outputSplit: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    marginTop: 0,\n    marginBottom: 10,\n    width: '10%',\n  },\n  fab: {\n    margin: theme.spacing.unit,\n  },\n  header: {\n    marginTop: 30,\n    marginBottom: 0,\n  },\n  slider: {\n    padding: '22px 0px',\n    marginLeft: '10px'\n  },\n  rightIcon: {\n    marginLeft: theme.spacing.unit,\n  },\n})\n\nexport default withStyles(styles)(NewTx)\n","import { StepLabel, Stepper, Step, StepContent } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles'\nimport axios from 'axios'\nimport React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/Card'\n\nclass TxStatus extends React.Component {\n  state = {\n    currentStep: 0,\n  }\n\n  componentDidMount() {\n    this.pollStatus()\n  }\n\n  pollStatus = () => {\n    axios\n      .post('/tx-status', {\n        'id': this.props.txId\n      })\n      .then(this.handleStatus)\n      .catch(function (error) {\n        console.log(error)\n      })\n\n    setTimeout(() => {\n      this.pollStatus()\n    }, 500)\n  }\n\n  handleStatus = (value) => {\n    this.setState({\n      currentStep: value.data.current + 1,\n    })\n  }\n\n  render() {\n    const { classes } = this.props\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n          <Stepper activeStep={this.state.currentStep} orientation=\"vertical\">\n            <Step key={0}>\n              <StepLabel>Awaiting Deposit to: {this.props.depositAddr}</StepLabel>\n              <StepContent>Deposit TODO jobcoins to {this.props.depositAddr}</StepContent>\n            </Step>\n            {Array(this.props.outputCount).fill().map((label, index) => (\n              <Step key={index+1}>\n                <StepLabel>Scheduling Payment {index}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n        </CardContent>\n      </Card>\n    )\n  }\n\n}\nconst styles = theme => ({\n  card: {\n    maxWidth: '65%',\n    margin: '0 auto',\n    marginTop: 50,\n  },\n  root: {\n    flexGrow: 1,\n  },\n})\n\nexport default withStyles(styles)(TxStatus)\n","import { withStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport NewTx from './NewTx'\nimport TxStatus from './TxStatus'\n\n\nclass App extends React.Component {\n  state = {\n    depositAddress: '',\n    txId: '',\n    outputCount: 0,\n  }\n\n  onTx = (value) => {\n    console.log(value)\n    this.setState({\n      depositAddr: value.data.depositAddress,\n      txId: value.data.id,\n      outputCount: value.data.spec.outputs.length\n    })\n\n    console.log(this.state)\n  }\n\n  handleStatus = (value) => {\n    this.setState({\n      txstatus: value.data\n    })\n  }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <div className={classes.root}>\n        <NewTx\n          onTx={this.onTx} />\n        {this.state.txId !== '' &&\n          <TxStatus txId={this.state.txId} depositAddr={this.state.depositAddr} outputCount={this.state.outputCount}/>\n        }\n      </div>\n    )\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nconst styles = theme => ({\n  card: {\n    maxWidth: '65%',\n    margin: '0 auto',\n    marginTop: 50,\n  },\n  root: {\n    flexGrow: 1,\n  },\n})\n\nexport default withStyles(styles)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'http://localhost:8000'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}